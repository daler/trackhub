name: test
on: [push]

jobs:
  conda-env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Use the cached conda env if it exists (key is based on requirements plus
    # a hard-coded version string)
    - name: load cached env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: test-env
        key: ${{ hashFiles('requirements.txt') }}-${{ hashFiles('test-requirements.txt') }}-v1

    # Only build the env if there was a cache miss
    - name: build conda env
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        eval "$(conda shell.bash hook)"
        conda create -p ./test-env -y --file requirements.txt --file test-requirements.txt --channel conda-forge --channel bioconda

    - name: run pytests and build/test docs
      run: |
        eval "$(conda shell.bash hook)"
        source activate ./test-env
        python setup.py install
        pytest -vv --doctest-modules trackhub
        cd doc && make doctest html
        conda deactivate

    - name: upload built docs as artifact
      uses: actions/upload-artifact@v2
      with:
        name: docs
        path: doc/build/html

    - name: upload built hubs as artifact
      uses: actions/upload-artifact@v2
      with:
        name: test-artifact
        path: doc/build

    - name: commit built docs to gh-pages branch
      run: |
        cp -r doc/build/html /tmp/docs
        git checkout gh-pages || git checkout --orphan gh-pages
        rm -rf ./*
        cp -r /tmp/docs/* .
        touch .nojekyll
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m 'update docs'

    - name: push docs to gh-pages branch
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages

  # Thanks to https://tabris.com/using-deploy-keys-on-github-actions for the
  # various steps
  push-to-trackhub-demo:
    runs-on: ubuntu-latest
    needs: conda-env
    steps:
    - uses: actions/checkout@v2
    - name: download-artifact
      uses: actions/download-artifact@v2
      id: download
      with:
        name: test-artifact
        path: /tmp/artifact
    - name: decrypt
      env:
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        openssl aes-256-cbc -in .github/workflows/secrets/id_rsa.enc -out .github/workflows/secrets/id_rsa -pass pass:$ENCRYPTION_KEY -d -md sha1 -iter 75

    - name: ssh agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        chmod 0600 .github/workflows/secrets/id_rsa
        ssh-add .github/workflows/secrets/id_rsa

    - name: checkout trackhub-demo
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "trackhub repo's GitHub Action"
        git clone git@github.com:daler/trackhub-demo.git
        echo ${{ steps.download.outputs.download-path }}
        ls -l /tmp/artifact
        cd trackhub-demo
        git checkout -B github-action-test
        git pull origin github-action-test
        echo "a" >> a.txt
        git add a.txt
        git commit -m 'add a.txt'
        git push origin github-action-test

    - name: cleanup
      if: always()
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-add -D
        rm -Rf  *


  # Separate, parallel job for testing pip installation
  pip-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: python setup.py sdist
      - run: pip install dist/*.tar.gz
      - run: python -c 'import trackhub'



