name: test
on: [push]

jobs:
  conda-env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Load cached env.
    #   This looks for a cache based on the hash of requirements.txt and
    #   test-requirements.txt; if it's found the cached directory is restored.
    - name: load cached conda env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: /tmp/test-env
        key: ${{ hashFiles('requirements.txt') }}-${{ hashFiles('test-requirements.txt') }}-v1

    # Build cache if needed
    #   Only runs if there was a cache miss. If this is created. there's
    #   a "Post load cached env" job that will load this into the cache for use
    #   next time.
    - name: build new conda env
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        eval "$(conda shell.bash hook)"
        conda create -p /tmp/test-env -y --file requirements.txt --file test-requirements.txt --channel conda-forge --channel bioconda

    # Pretty much all of the testing happens here
    - name: run pytests; build and test docs
      run: |
        eval "$(conda shell.bash hook)"
        source activate /tmp/test-env
        python setup.py install
        pytest -vv --doctest-modules trackhub
        cd doc && make doctest html
        conda deactivate

    - name: upload the just-built docs as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: docs
        path: doc/build/html

    - name: commit built docs to gh-pages branch
      run: |
        cp -r doc/build/html /tmp/docs
        git checkout gh-pages || git checkout --orphan gh-pages
        rm -rf ./*
        cp -r /tmp/docs/* .
        touch .nojekyll
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add .
        git commit -m 'update docs'

    - name: push docs to gh-pages branch
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages

  # Thanks to https://tabris.com/using-deploy-keys-on-github-actions for the
  # various steps

    - name: decrypt id_rsa key
      env:
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        openssl aes-256-cbc -in .github/workflows/secrets/id_rsa.enc -out .github/workflows/secrets/id_rsa -pass pass:$ENCRYPTION_KEY -d -md sha1 -iter 75

    - name: start ssh agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        chmod 0600 .github/workflows/secrets/id_rsa
        ssh-add .github/workflows/secrets/id_rsa

    - name: checkout trackhub-demo repo
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        # checkout the original (non gh-pages) branch
        git checkout -
        pwd
        ls -R
        eval "$(conda shell.bash hook)"
        source activate /tmp/test-env
        bash ci/run_build.sh

    - name: add built-hubs artifact to trackhub-demo and push
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        cd trackhub-demo
        git checkout -B github-action-test
        git pull origin github-action-test
        echo "a" >> a.txt
        git add a.txt
        git commit -m 'add a.txt'
        git push origin github-action-test

    - name: cleanup
      if: always()
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-add -D
        rm -Rf  *


  # Separate, parallel job for testing pip installation
  pip-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: python setup.py sdist
      - run: pip install dist/*.tar.gz
      - run: python -c 'import trackhub'
