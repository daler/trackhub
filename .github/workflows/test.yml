name: test
on: [push]

jobs:
  conda-env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Use the cached conda env if it exists (key is based on requirements plus
    # a hard-coded version string)
    - name: cache env
      id: cache-env
      uses: actions/cache@v2
      with:
        path: test-env
        key: ${{ hashFiles('requirements.txt') }}-${{ hashFiles('test-requirements.txt') }}-v1

    # Only build the env if there was a cache miss
    - name: build env
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: |
        eval "$(conda shell.bash hook)"
        conda create -p ./test-env -y --file requirements.txt --file test-requirements.txt --channel conda-forge --channel bioconda

    # Activate conda env, run tests, build docs. Most of the work happens
    # here....
    - name: pytests, doctests, and build docs
      run: |
          eval "$(conda shell.bash hook)"
          source activate ./test-env
          python setup.py install
          pytest -vv --doctest-modules trackhub
          cd doc && make doctest html
          conda deactivate

    # Upload the built docs as an artifact for inspection
    - name: upload-artifact
      uses: actions/upload-artifact@v2
      with:
        name: docs
        path: doc/build/html

    - name: upload-built-hubs
      uses: actions/upload-artifact@v2
      with:
        name: test-artifact
        path: doc/build

    # Commit the changes to the gh-pages branch. This will only be pushed in
    # the next step if we're on the master branch
    - name: commit to gh-pages
      run: |
        cp -r doc/build/html /tmp/docs
        git checkout gh-pages || git checkout --orphan gh-pages
        rm -rf ./*
        cp -r /tmp/docs/* .
        touch .nojekyll
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m 'update docs'

    # Actually push the committed changes to gh-pages branch, thereby updating
    # the hosted docs at https://github.io/daler/trackhub
    - name: push docs
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages

  push-to-trackhub-demo:
    runs-on: ubuntu-latest
    needs: conda-env
    steps:
    - uses: actions/checkout@v2
    - name: download-artifact
      uses: actions/download-artifact@v2
      with:
        name: test-artifact
        path: /tmp/artifact
    - name: decrypt
      env:
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        openssl aes-256-cbc -in .github/workflows/secrets/id_rsa.enc -out .github/workflows/secrets/id_rsa -pass pass:$ENCRYPTION_KEY -d -md sha1 -iter 75

    - name: ssh agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        chmod 0600 .github/workflows/secrets/id_rsa
        ssh-add .github/workflows/secrets/id_rsa

    - name: checkout trackhub-demo
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "trackhub repo's GitHub Action"
        git clone git@github.com:daler/trackhub-demo.git
        echo ${{steps.downloadi-artifact.outputs.download-path }}
        ls -l /tmp/artifact/output.txt >> a.txt
        cd trackhub-demo
        git checkout -B github-action-test
        git pull origin github-action-test
        cat /tmp/artifact/ >> a.txt
        git add a.txt
        git commit -m 'add a.txt'
        git push origin github-action-test

    - name: cleanup
      if: always()
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-add -D
        rm -Rf  *


  # Separate, parallel job for testing pip installation
  pip-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: python setup.py sdist
      - run: pip install dist/*.tar.gz
      - run: python -c 'import trackhub'



